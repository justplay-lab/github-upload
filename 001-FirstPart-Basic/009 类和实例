from student import Student

a = Student('野原新之助', 5)     # 定义实例
print(a.classroom)             # 访问公共属性,用.来访问对象的属性
# print(a._Student__headmaster)  # 访问私有属性，用点好.来访问对象的属性
print(a.head())
print(a.displayCount())
print(a.displayStudent())
print(a.displayClassroom())
print(a.displayKindergarten())
"""
总结出面向对象编程的三个基本特征，如下所述。
（1）封装：将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体（即类）；
         封装的目的是增强安全性和简化编程，使用者不必了解具体的实现细节，
         而只要通过外部接口、特定的访问权限来使用类的成员。
（2）继承：在遵循原有设计和既有代码不变的前提下，添加新功能，或改进算法。
         记住其“开闭”原则是对扩展开放，对修改封闭。
（3）多态：所有继承子类应该能直接引用父类，这样可以把复杂类型的公用部分剥离出来，
         形成稳固的抽象类。其他引发变化的相似因素则被分离成多个子类，
         以确保单一职责原则得到遵守，并能相互替换。
"""